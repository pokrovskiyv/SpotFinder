/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –ï–¥–∏–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * - –í–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
 */

import { Environment } from './types.ts';

export class Config {
  private static instance: Config;
  private env: Environment & { ENVIRONMENT?: string };

  private constructor() {
    this.env = this.loadEnvironment();
    this.validate();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Config (Singleton)
   */
  static getInstance(): Config {
    if (!Config.instance) {
      Config.instance = new Config();
    }
    return Config.instance;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private loadEnvironment(): Environment & { ENVIRONMENT?: string } {
    const envObject = Deno.env.toObject();
    
    return {
      TELEGRAM_BOT_TOKEN: envObject.TELEGRAM_BOT_TOKEN || '',
      GEMINI_API_KEY: envObject.GEMINI_API_KEY || '',
      GOOGLE_MAPS_API_KEY: envObject.GOOGLE_MAPS_API_KEY || '',
      SUPABASE_URL: envObject.SUPABASE_URL || '',
      SUPABASE_SERVICE_ROLE_KEY: envObject.SUPABASE_SERVICE_ROLE_KEY || '',
      ENVIRONMENT: envObject.ENVIRONMENT || 'production',
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private validate(): void {
    const required: Array<keyof Environment> = [
      'TELEGRAM_BOT_TOKEN',
      'GEMINI_API_KEY',
      'GOOGLE_MAPS_API_KEY',
      'SUPABASE_URL',
      'SUPABASE_SERVICE_ROLE_KEY',
    ];
    
    const missing = required.filter(key => !this.env[key]);
    
    if (missing.length > 0) {
      throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Supabase URL
    if (this.env.SUPABASE_URL && !this.env.SUPABASE_URL.includes('supabase.co')) {
      console.warn('‚ö†Ô∏è  Warning: SUPABASE_URL does not look like a valid Supabase URL');
    }
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  
  get supabaseUrl(): string {
    return this.env.SUPABASE_URL;
  }

  get supabaseKey(): string {
    return this.env.SUPABASE_SERVICE_ROLE_KEY;
  }

  get telegramToken(): string {
    return this.env.TELEGRAM_BOT_TOKEN;
  }

  get geminiKey(): string {
    return this.env.GEMINI_API_KEY;
  }

  get mapsKey(): string {
    return this.env.GOOGLE_MAPS_API_KEY;
  }

  get environment(): string {
    return this.env.ENVIRONMENT || 'production';
  }

  // –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
  
  get isProduction(): boolean {
    return this.environment === 'production';
  }

  get isDevelopment(): boolean {
    return this.environment === 'development';
  }

  get isStaging(): boolean {
    return this.environment === 'staging';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π webhook URL –¥–ª—è Telegram
   * –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç .functions.supabase.co —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
   * 
   * @param projectId - ID –ø—Ä–æ–µ–∫—Ç–∞ Supabase
   * @returns –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è webhook
   */
  getWebhookUrl(projectId: string): string {
    return `https://${projectId}.functions.supabase.co/telegram-webhook`;
  }

  /**
   * –ò–∑–≤–ª–µ—á—å project ID –∏–∑ Supabase URL
   * 
   * @returns Project ID –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
   */
  getProjectIdFromUrl(): string | null {
    const url = this.supabaseUrl;
    const match = url.match(/https:\/\/([a-z0-9]+)\.supabase\.co/);
    return match ? match[1] : null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π webhook URL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getCurrentWebhookUrl(): string {
    const projectId = this.getProjectIdFromUrl();
    if (!projectId) {
      throw new Error('Could not extract project ID from SUPABASE_URL');
    }
    return this.getWebhookUrl(projectId);
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
   */
  printConfig(): void {
    console.log('üìã Configuration:');
    console.log(`   Environment: ${this.environment}`);
    console.log(`   Supabase URL: ${this.supabaseUrl}`);
    console.log(`   Telegram token: ${this.telegramToken ? '‚úì Set' : '‚úó Missing'}`);
    console.log(`   Gemini API key: ${this.geminiKey ? '‚úì Set' : '‚úó Missing'}`);
    console.log(`   Maps API key: ${this.mapsKey ? '‚úì Set' : '‚úó Missing'}`);
    
    const projectId = this.getProjectIdFromUrl();
    if (projectId) {
      console.log(`   Project ID: ${projectId}`);
      console.log(`   Webhook URL: ${this.getCurrentWebhookUrl()}`);
    }
  }
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export function getConfig(): Config {
  return Config.getInstance();
}

