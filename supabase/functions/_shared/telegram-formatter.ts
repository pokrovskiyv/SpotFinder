// Telegram Response Formatter - formats data for Telegram messages

import { PlaceResult, PlaceReview } from './types.ts';
import { formatDistance, truncateText } from './utils.ts';
import { InlineButton } from './telegram-client.ts';
import { BUTTONS } from './constants.ts';

/**
 * Format place results into a readable message - show only first place
 */
export function formatPlacesMessage(
  places: PlaceResult[],
  introText?: string
): string {
  if (places.length === 0) {
    return 'üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª —Ä—è–¥–æ–º. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.';
  }

  // Show only first place
  const place = places[0];
  let message = introText ? `${introText}\n\n` : 'üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n';

  message += `**${place.name}**\n`;

  if (place.rating) {
    message += `‚≠ê ${place.rating.toFixed(1)}`;
  }

  if (place.price_level) {
    message += ` ‚Ä¢ ${getPriceLevel(place.price_level)}`;
  }

  if (place.distance) {
    message += ` ‚Ä¢ ${formatDistance(place.distance)}`;
  }

  if (place.is_open !== undefined) {
    message += place.is_open ? ' ‚Ä¢ ‚úÖ –û—Ç–∫—Ä—ã—Ç–æ' : ' ‚Ä¢ ‚ùå –ó–∞–∫—Ä—ã—Ç–æ';
  }

  if (place.address) {
    message += `\nüìç ${truncateText(place.address, 100)}`;
  }

  return message.trim();
}

/**
 * Get price level emoji
 */
function getPriceLevel(level: number): string {
  const symbols = 'üí∞'.repeat(Math.min(level, 4));
  return symbols || 'üí∞';
}

/**
 * Create buttons for a place
 */
export function createPlaceButtons(
  place: PlaceResult,
  index: number
): InlineButton[][] {
  const buttons: InlineButton[][] = [];

  // First row: Reviews and Show More buttons
  const row1: InlineButton[] = [];

  if (place.place_id) {
    row1.push({
      text: BUTTONS.REVIEWS,
      callback_data: `reviews_${index}_${place.place_id}`,
    });

    row1.push({
      text: BUTTONS.SHOW_MORE,
      callback_data: `next_${index}`,
    });
  }

  buttons.push(row1);

  return buttons;
}

/**
 * Create buttons for multiple places
 */
export function createPlacesListButtons(places: PlaceResult[]): InlineButton[][] {
  const buttons: InlineButton[][] = [];

  // Create a button for each place (max 5)
  places.slice(0, 5).forEach((place, index) => {
    buttons.push([
      {
        text: `${index + 1}. ${truncateText(place.name, 30)}`,
        callback_data: `select_${index}_${place.place_id}`,
      },
    ]);
  });

  return buttons;
}

/**
 * Format single place details
 */
export function formatPlaceDetails(place: PlaceResult): string {
  let message = `üìç **${place.name}**\n\n`;

  if (place.address) {
    message += `üè† –ê–¥—Ä–µ—Å: ${place.address}\n`;
  }

  if (place.rating) {
    message += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${place.rating.toFixed(1)}/5\n`;
  }

  if (place.price_level) {
    message += `üí∞ –¶–µ–Ω—ã: ${getPriceLevel(place.price_level)}\n`;
  }

  if (place.distance) {
    message += `üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${formatDistance(place.distance)}\n`;
  }

  if (place.is_open !== undefined) {
    message += place.is_open ? '‚úÖ –û—Ç–∫—Ä—ã—Ç–æ —Å–µ–π—á–∞—Å\n' : '‚ùå –ó–∞–∫—Ä—ã—Ç–æ\n';
  }

  return message;
}

/**
 * Format reviews and photos for a place
 */
export function formatReviewsMessage(place: PlaceResult): string {
  let message = `üìù **–û—Ç–∑—ã–≤—ã –æ ${place.name}**\n\n`;

  if (!place.reviews || place.reviews.length === 0) {
    return message + '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.';
  }

  place.reviews.forEach((review, index) => {
    const emoji = review.sentiment === 'positive' ? 'üëç' : 
                  review.sentiment === 'negative' ? 'üëé' : 'üòê';
    
    message += `${emoji} ${review.author_name} (${review.rating}/5)\n`;
    message += `${review.translated_text || review.text}\n\n`;
  });

  return message.trim();
}

/**
 * Format error message
 */
export function formatErrorMessage(error: string): string {
  return `üòï ${error}\n\n–ü–æ–ø—Ä–æ–±—É–π:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—à—å\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏`;
}

/**
 * Format welcome message with user name
 */
export function formatWelcomeMessage(firstName: string): string {
  return `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø SpotFinder - —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç.

–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞—Ñ–µ, –∞–ø—Ç–µ–∫–∏, –º–∞–≥–∞–∑–∏–Ω—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ.

üîπ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ù–∞–π–¥–∏ —Ç–∏—Ö–æ–µ –∫–∞—Ñ–µ —Å Wi-Fi –¥–ª—è —Ä–∞–±–æ—Ç—ã"
‚Ä¢ "–ì–¥–µ –±–ª–∏–∂–∞–π—à–∞—è –∞–ø—Ç–µ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã—Ç–∞?"
‚Ä¢ "–•–æ—á—É –Ω–µ–¥–æ—Ä–æ–≥–æ –ø–æ–µ—Å—Ç—å"

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π üìç`;
}

