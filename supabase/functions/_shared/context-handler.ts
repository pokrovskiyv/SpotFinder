// Context Handler - manages conversation context and follow-up queries

import { PlaceResult, QuestionType } from './types.ts';
import { formatPlaceDetails } from './telegram-formatter.ts';
import { formatDistance } from './utils.ts';

export class ContextHandler {
  /**
   * Determine the type of follow-up question
   */
  determineQuestionType(question: string): QuestionType {
    const lowerQuestion = question.toLowerCase();
    
    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const comparisonPatterns = [
      /\b(—á–µ–º|—á—Ç–æ\s+–ª—É—á—à–µ|—Å—Ä–∞–≤–Ω–∏|–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è|–æ—Ç–ª–∏—á–∏–µ|—Ä–∞–∑–Ω–∏—Ü–∞)\b/i,
      /\b(–ª—É—á—à–µ|—Ö—É–∂–µ|–¥–æ—Ä–æ–∂–µ|–¥–µ—à–µ–≤–ª–µ|–±–ª–∏–∂–µ|–¥–∞–ª—å—à–µ)\b/i,
      /\b(–ø–µ—Ä–≤—ã–π|–≤—Ç–æ—Ä–æ–π|—Ç—Ä–µ—Ç–∏–π)\s+(–∏|–∏–ª–∏)\s+(–ø–µ—Ä–≤—ã–π|–≤—Ç–æ—Ä–æ–π|—Ç—Ä–µ—Ç–∏–π|—á–µ—Ç–≤–µ—Ä—Ç—ã–π|–ø—è—Ç—ã–π)\b/i,
    ];
    
    if (comparisonPatterns.some(pattern => pattern.test(lowerQuestion))) {
      return 'comparison';
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –¥–µ—Ç–∞–ª—è—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    const detailPatterns = [
      /\b(–∫–∞–∫–∏–µ|–∫–∞–∫–∞—è|–∫–∞–∫–æ–µ|–∫–∞–∫–æ–π)\b/i,
      /\b(—Ä–∞—Å—Å–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏)\s+(–ø–æ–¥—Ä–æ–±–Ω–µ–µ|–±–æ–ª—å—à–µ|–µ—â–µ|–ø—Ä–æ|–æ)\b/i,
      /\b(–µ—Å—Ç—å\s+–ª–∏|–∞\s+–µ—Å—Ç—å)\b/i,
      /\b(—Ü–µ–Ω—ã|—á–∞—Å—ã|–≤—Ä–µ–º—è|–ø–∞—Ä–∫–æ–≤–∫–∞|–º–µ–Ω—é|wi-fi|wifi|–∞–¥—Ä–µ—Å|—Ä–µ–π—Ç–∏–Ω–≥|–æ—Ç–∑—ã–≤)\b/i,
    ];
    
    if (detailPatterns.some(pattern => pattern.test(lowerQuestion))) {
      return 'detail';
    }
    
    // –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ Gemini)
    return 'general';
  }

  /**
   * Format answer for follow-up question about a specific place
   */
  formatPlaceAnswer(place: PlaceResult, question: string): string {
    const lowerQuestion = question.toLowerCase();

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (lowerQuestion.includes('–ø–æ–¥—Ä–æ–±–Ω–µ–µ') || lowerQuestion.includes('—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ') || lowerQuestion.includes('–ø–æ–∫–∞–∂–∏ –±–æ–ª—å—à–µ')) {
      return this.formatDetailedInfo(place);
    }

    // –ü–∞—Ä–∫–æ–≤–∫–∞
    if (lowerQuestion.includes('–ø–∞—Ä–∫–æ–≤–∫')) {
      return `üöó **${place.name}**\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–æ–≤–∫–µ:\n${this.getParkingInfo(place)}`;
    }

    // –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã
    if (lowerQuestion.includes('—á–∞—Å') || lowerQuestion.includes('—Ä–∞–±–æ—Ç') || lowerQuestion.includes('–æ—Ç–∫—Ä—ã—Ç')) {
      return `‚è∞ **${place.name}**\n\n${this.getOpeningHoursInfo(place)}`;
    }

    // –¶–µ–Ω—ã
    if (lowerQuestion.includes('—Ü–µ–Ω') || lowerQuestion.includes('–¥–æ—Ä–æ–≥') || lowerQuestion.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return `üí∞ **${place.name}**\n\n${this.getPriceInfo(place)}`;
    }

    // –û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥
    if (lowerQuestion.includes('–æ—Ç–∑—ã–≤') || lowerQuestion.includes('—Ä–µ–π—Ç–∏–Ω–≥')) {
      return `‚≠ê **${place.name}**\n\n${this.getRatingInfo(place)}`;
    }

    // –ê–¥—Ä–µ—Å
    if (lowerQuestion.includes('–∞–¥—Ä–µ—Å') || lowerQuestion.includes('–≥–¥–µ') || lowerQuestion.includes('–Ω–∞—Ö–æ–¥–∏—Ç—Å—è')) {
      return `üìç **${place.name}**\n\n–ê–¥—Ä–µ—Å: ${place.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
    }

    // –ú–µ–Ω—é
    if (lowerQuestion.includes('–º–µ–Ω—é')) {
      return `üìã **${place.name}**\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Å—Ç–∞ –≤ Google Maps –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.`;
    }

    // Wi-Fi
    if (lowerQuestion.includes('wi-fi') || lowerQuestion.includes('wifi') || lowerQuestion.includes('–∏–Ω—Ç–µ—Ä–Ω–µ—Ç')) {
      return `üì∂ **${place.name}**\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Wi-Fi –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å.`;
    }

    // Default: full info
    return formatPlaceDetails(place);
  }

  /**
   * Format comparison answer for multiple places
   */
  formatComparisonAnswer(places: PlaceResult[], question: string): string {
    if (places.length < 2) {
      return '–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –º–µ—Å—Ç–∞.';
    }

    const lowerQuestion = question.toLowerCase();
    let response = `üîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Å—Ç**\n\n`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
    if (lowerQuestion.includes('—Ü–µ–Ω') || lowerQuestion.includes('–¥–æ—Ä–æ–≥') || lowerQuestion.includes('–¥–µ—à–µ–≤–ª–µ')) {
      response += this.comparePrices(places);
    } else if (lowerQuestion.includes('—Ä–µ–π—Ç–∏–Ω–≥') || lowerQuestion.includes('–ª—É—á—à–µ') || lowerQuestion.includes('—Ö—É–∂–µ')) {
      response += this.compareRatings(places);
    } else if (lowerQuestion.includes('–±–ª–∏–∑') || lowerQuestion.includes('–¥–∞–ª–µ–∫–æ') || lowerQuestion.includes('—Ä–∞—Å—Å—Ç–æ—è–Ω–∏')) {
      response += this.compareDistances(places);
    } else {
      // –û–±—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
      response += this.compareGeneral(places);
    }

    return response;
  }

  /**
   * Format detailed information about a place
   */
  formatDetailedInfo(place: PlaceResult): string {
    let info = `üìç **${place.name}**\n\n`;

    if (place.address) {
      info += `üè† **–ê–¥—Ä–µ—Å:**\n${place.address}\n\n`;
    }

    if (place.rating) {
      info += `‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** ${place.rating.toFixed(1)}/5\n`;
    }

    if (place.price_level) {
      info += `üí∞ **–¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** ${this.formatPriceLevel(place.price_level)}\n`;
    }

    if (place.is_open !== undefined) {
      info += `\nüïê **–°—Ç–∞—Ç—É—Å:** ${place.is_open ? '‚úÖ –û—Ç–∫—Ä—ã—Ç–æ —Å–µ–π—á–∞—Å' : '‚ùå –ó–∞–∫—Ä—ã—Ç–æ'}\n`;
    }

    return info;
  }

  /**
   * Compare prices of multiple places
   */
  private comparePrices(places: PlaceResult[]): string {
    let comparison = '';
    
    for (let i = 0; i < places.length; i++) {
      const place = places[i];
      const priceInfo = place.price_level 
        ? this.formatPriceLevel(place.price_level) 
        : '–¶–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
      
      comparison += `**${i + 1}. ${place.name}**\n${priceInfo}\n\n`;
    }
    
    // –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ
    const cheapest = places
      .map((p, idx) => ({ place: p, index: idx }))
      .filter(p => p.place.price_level)
      .sort((a, b) => (a.place.price_level || 99) - (b.place.price_level || 99))[0];
    
    if (cheapest) {
      comparison += `üí° –°–∞–º—ã–π –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: **${cheapest.place.name}**`;
    }
    
    return comparison;
  }

  /**
   * Compare ratings of multiple places
   */
  private compareRatings(places: PlaceResult[]): string {
    let comparison = '';
    
    for (let i = 0; i < places.length; i++) {
      const place = places[i];
      const ratingInfo = place.rating 
        ? `‚≠ê ${place.rating.toFixed(1)}/5` 
        : '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω';
      
      comparison += `**${i + 1}. ${place.name}**\n${ratingInfo}\n\n`;
    }
    
    // –ù–∞–π—Ç–∏ —Å –ª—É—á—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    const best = places
      .map((p, idx) => ({ place: p, index: idx }))
      .filter(p => p.place.rating)
      .sort((a, b) => (b.place.rating || 0) - (a.place.rating || 0))[0];
    
    if (best) {
      comparison += `üí° –ù–∞–∏–≤—ã—Å—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥: **${best.place.name}** (${best.place.rating?.toFixed(1)}/5)`;
    }
    
    return comparison;
  }

  /**
   * Compare distances of multiple places
   */
  private compareDistances(places: PlaceResult[]): string {
    let comparison = '';
    
    for (let i = 0; i < places.length; i++) {
      const place = places[i];
      const distanceInfo = place.distance 
        ? `üìç ${formatDistance(place.distance)}` 
        : '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      comparison += `**${i + 1}. ${place.name}**\n${distanceInfo}\n\n`;
    }
    
    // –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ
    const closest = places
      .map((p, idx) => ({ place: p, index: idx }))
      .filter(p => p.place.distance)
      .sort((a, b) => (a.place.distance || 999999) - (b.place.distance || 999999))[0];
    
    if (closest) {
      comparison += `üí° –ë–ª–∏–∂–∞–π—à–µ–µ: **${closest.place.name}** (${formatDistance(closest.place.distance!)})`;
    }
    
    return comparison;
  }

  /**
   * General comparison of multiple places
   */
  private compareGeneral(places: PlaceResult[]): string {
    let comparison = '';
    
    for (let i = 0; i < places.length; i++) {
      const place = places[i];
      comparison += `**${i + 1}. ${place.name}**\n`;
      
      if (place.rating) {
        comparison += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${place.rating.toFixed(1)}/5\n`;
      }
      
      if (place.price_level) {
        comparison += `üí∞ ${this.formatPriceLevel(place.price_level)}\n`;
      }
      
      if (place.distance) {
        comparison += `üìç ${formatDistance(place.distance)}\n`;
      }
      
      if (place.is_open !== undefined) {
        comparison += `üïê ${place.is_open ? '‚úÖ –û—Ç–∫—Ä—ã—Ç–æ' : '‚ùå –ó–∞–∫—Ä—ã—Ç–æ'}\n`;
      }
      
      comparison += '\n';
    }
    
    return comparison;
  }

  /**
   * Get parking information
   */
  private getParkingInfo(place: PlaceResult): string {
    // In production, this would query Google Places API for parking info
    // For now, return generic response
    return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∫–æ–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏ —É—Ç–æ—á–Ω–∏—Ç—å.';
  }

  /**
   * Get opening hours information
   */
  private getOpeningHoursInfo(place: PlaceResult): string {
    if (place.is_open !== undefined) {
      if (place.is_open) {
        return '‚úÖ –°–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç–æ\n\n–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ Google Maps.';
      } else {
        return '‚ùå –°–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç–æ\n\n–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ Google Maps.';
      }
    }
    return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–∞—Ö —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
  }

  /**
   * Get price information
   */
  private getPriceInfo(place: PlaceResult): string {
    if (!place.price_level) {
      return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
    }

    const levels = [
      '–û—á–µ–Ω—å –±—é–¥–∂–µ—Ç–Ω–æ',
      '–ù–µ–¥–æ—Ä–æ–≥–æ',
      '–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã',
      '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ',
      '–î–æ—Ä–æ–≥–æ',
    ];

    return `–¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${levels[place.price_level - 1] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;
  }

  /**
   * Get rating information
   */
  private getRatingInfo(place: PlaceResult): string {
    if (!place.rating) {
      return '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.';
    }

    let info = `–†–µ–π—Ç–∏–Ω–≥: ${place.rating.toFixed(1)}/5\n\n`;

    if (place.rating >= 4.5) {
      info += 'üåü –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥! –û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç.';
    } else if (place.rating >= 4.0) {
      info += 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥. –ú–Ω–æ–≥–∏–º –Ω—Ä–∞–≤–∏—Ç—Å—è.';
    } else if (place.rating >= 3.0) {
      info += 'ü§î –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥. –û—Ç–∑—ã–≤—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ.';
    } else {
      info += '‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.';
    }

    return info;
  }

  /**
   * Format price level
   */
  private formatPriceLevel(level: number): string {
    const symbols = 'üí∞'.repeat(Math.min(level, 4));
    const levels = [
      '–û—á–µ–Ω—å –±—é–¥–∂–µ—Ç–Ω–æ',
      '–ù–µ–¥–æ—Ä–æ–≥–æ',
      '–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã',
      '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ',
      '–î–æ—Ä–æ–≥–æ',
    ];
    return `${symbols} ${levels[level - 1] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;
  }

  /**
   * Detect if query needs previous context
   */
  needsContext(query: string): boolean {
    const contextPatterns = [
      /\b(–æ–Ω|–æ–Ω–∞|–æ–Ω–æ|—Ç–∞–º|—Ç—É–¥–∞|—Å—é–¥–∞|—ç—Ç–æ—Ç|—Ç–æ—Ç)\b/i,
      /\b(–ø–µ—Ä–≤—ã–π|–≤—Ç–æ—Ä–æ–π|—Ç—Ä–µ—Ç–∏–π|—á–µ—Ç–≤–µ—Ä—Ç—ã–π|–ø—è—Ç—ã–π)\b/i,
      /\b(—É\s+–Ω–µ–≥–æ|—É\s+–Ω–µ–µ|—É\s+–Ω–∏—Ö)\b/i,
    ];

    return contextPatterns.some(pattern => pattern.test(query));
  }
}

